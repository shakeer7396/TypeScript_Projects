
1. What is Testing ?
A. Software Testing is the process of finding the errors of the software product before it is launched.
 Validate functioning and features of software

2. Types of testing 
A. Testing --> Manual testing  , Automation Testing

3. Testing By developers
A. Unit Testing,    --> Testing individual units of components
 Integration Testing,--> Testing between two units or components
  E to E Testing      --> Test Start to End complete project

4. React Testing Tools
A. a) Jest Framework     b) React Testing Library

5. Setup
A. npx create-react-app blog-app  -> Then enter cd blog-app ->then npm start 
    -> open terminal then enter npm run test

6. Start with basic javaScript file Testing Logic
---------------------------------------------------------------
A. Create sum.js file and do code there && create sum.test.js for testing the code with expected output
    Go to google enter jest then https://jestjs.io/ inside this page go to API and go below methods click this or see -> test(name, fn, timeout)  //It is a sintax for test function

    sum.js
    export default function sum(a,b){
    return a+b;
}

//Test function came from jest(); 3 parameters 1,2** Mandatory 3 is optional(setTimeout)
//Test function takes three parameters 1-message, 2-call back func (write inside tesing output logic), 3-setTimeout for setting time for how much time after output will show. Add after the func },there);

--> test & expect both came from Jest, (render,screen) both came from React-Testing-Library

sum.test.js
import sum from "./sum";

test("testing for sum function-1",()=>{
expect(sum(10,20)).toBe(20)  //toBe means muje itna output chahiye batana hai
});

// Add more test functions this type also declare the variables there
test("testing for sum function-2",()=>{
    let a =10;
    let b =20;
    let output= 30;
    expect(sum(a,b)).toBe(output)  //toBe means muje itna output chahiye batana hai
    });


# 4 Understanding React Test Structure
------------------------------------
-> What need to import
-> How to render the component
-> How tests working with RTL
-> How test finding UI elements

--> All librariees are installed globally but we need to import some places
1.-> import { render, screen } from '@testing-library/react'; in App.js its comes by default
    -> render use karte hai component ko render karne k liye and screen use karte hai screen k vupar jo kuch be hai vusko test ko test karna chahte ho vusko screen k help se kar sakte hai
2.-->Jis component ko hum test karna chaahte hai vusko import karna hai
    -> Ek file k ander multiple files (components) ko test kar sakte hai [no problem].

App.js
    import { render, screen } from '@testing-library/react'; 
import App from './App';

test('renders learn react link', () => {    // TEST FUNCTION WITH 3 PARAMETERS
  render(<App />); // RENDERING THE COMPONENT WITH NAME
  const linkElement = screen.getByText(/learn react/i);     // SCREEN PE JO HAI VUSKE BASE PE TEST KARNA LIKE learn react inside this component showing in the screen RUNS PASS OR FAIL
  expect(linkElement).toBeInTheDocument();  // EXPECTED DOCUMENT ME JO HAI VO TEST KARNA CHAHIYE
});

#-> 5 Write First React Test
----------------------------------------
-> Make new Test function
-> Write test case for check text on screen
-> Write test for case-insentive text
-> Test title for image
-> Write multiple expect in the same test function

** All Code done there 

App.test.js
import {render, screen} from "@testing-library/react";
import App from "./App";

test("Test First React Test Case", ()=>{
  render(<App />)
  const text = screen.getByText(/First React Test Case/i); //Its a case sensitive but using /i acpt C&c
const title = screen.getByTitle("GoogleImage");
const text2 = screen.getByText(/Software Testing/i);
  expect(text).toBeInTheDocument();
  expect (title).toBeInTheDocument();
  expect (text2).toBeInTheDocument();

});

App.js
import "./App.css";

function App() {
  return (
    <div className="App">
      {/* You can add anything in start and end ogf the given text but not middle expected text is matching or not it will check these things */}
      <p>ABC First React test Case ABC123a</p>
      <p>Software Testing</p>
      <img   title="GoogleImage"
        src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRrfwAhgmyiHHQ7kj-aEbk9AGCKcwo0wYeuwg&s"
      />
    </div>
  );
}

export default App;

#-> 6 Test Input Box  (how to test input boxes)
----------------------------------------
-> Make input box in App Component
-> Write test case function
-> The test input box is present are not
-> Test input box
    *name, placeholder, id, value, type

App.js
 <input type='text' placeholder="Enter User Name" name='username' value='Shaik Shafi' id='userId' />

App.test.js
test("Testing input box", ()=>{
  render(<App />)
  let checkInput = screen.getByRole("textbox"); //input is showing or not checking
  let checkInputPlaceHolder=screen.getByPlaceholderText("Enter User Name")

  expect(checkInput).toBeInTheDocument();
  expect(checkInputPlaceHolder).toBeInTheDocument();
  expect(checkInput).toHaveAttribute("name","username");
  expect(checkInput).toHaveAttribute("id","userId");
  expect(checkInput).toHaveAttribute("type","text");
  expect(checkInput).toHaveAttribute("value","Shaik Shafi");
})


#-> 7 Test Case Run Options  (Test case run karne k liye options)
----------------------------------------
-> How to run specific test files
-> What is watch mode
-> How to run the failed test case
-> How to run all test className
-> How to quit watch mode
-> How to filter test files for run
-> How to filter test case

** Code below
--> Copy App.test.js file code and Create another file Other.test.js then paste it run npm run test
--> running all tests then press(w) to show all commands press(p) then enter file name for filter
--> press(t) then enter test name message any word it filters that in both test functions
--> press(f) for failed test cases details, press(q) for comming out of the test or clossing the test
--> press(a) to rull all the files and test cases
--> Test Suites means -> Seperate test files,  Tests means -> All Test cases in all files


#-> 8 Test Grouping With Describe  (Test cases ko grouping kaise karte)
----------------------------------------
-> What is Describe
-> How to make test cases Grouping
-> Run test case with Describe
-> Skip in Describe
-> Only in Describe
-> Nested Describe

--> Describe kato Alag alag functionalities to define karne ka like UI, API, Functionality etc 
--> Describe k ander test cases ko likhte hai like nested if

//Creating a describe method for running particular UI group test cases
describe("UI test case group",()=>{
  test("test case 1",()=>{
    render(<App />)
    let checkInput = screen.getByRole("textbox"); //input is showing or not checking
    expect(checkInput).toHaveAttribute("name","username");
  })
  test("test case 2",()=>{
    render(<App />)
    let checkInput = screen.getByRole("textbox"); //input is showing or not checking
    expect(checkInput).toHaveAttribute("name","username");
  })
  test("test case 3",()=>{
    render(<App />)
    let checkInput = screen.getByRole("textbox"); //input is showing or not checking
    expect(checkInput).toHaveAttribute("name","username");
  })
})
--> Alag alag groups banana konsa group hona vo ek hi run kar sakte hai time ko save karna hai

//Seperate group for API test cases with Another describe method
describe("API test case group",()=>{
  test("API test case 1",()=>{
    render(<App />)
    let checkInput = screen.getByRole("textbox"); //input is showing or not checking
    expect(checkInput).toHaveAttribute("name","username");
  })
  test("API test case 2",()=>{
    render(<App />)
    let checkInput = screen.getByRole("textbox"); //input is showing or not checking
    expect(checkInput).toHaveAttribute("name","username");
  })
  test("API test case 3",()=>{
    render(<App />)
    let checkInput = screen.getByRole("textbox"); //input is showing or not checking
    expect(checkInput).toHaveAttribute("name","username");
  })
})


--> Only means bahut test cases hai Sirf ek hi ko run karna chahte ho then use this all skip only 1 running 

describe.only("API test case group",()=>{
  test("API test case 1",()=>{
    render(<App />)
    let checkInput = screen.getByRole("textbox"); //input is showing or not checking
    expect(checkInput).toHaveAttribute("name","username");
  })
  test("API test case 2",()=>{
    render(<App />)
    let checkInput = screen.getByRole("textbox"); //input is showing or not checking
    expect(checkInput).toHaveAttribute("name","username");
  })
  test("API test case 3",()=>{
    render(<App />)
    let checkInput = screen.getByRole("textbox"); //input is showing or not checking
    expect(checkInput).toHaveAttribute("name","username");
  })
})
--> Skip b kar sakte ek group me bahut errors hai vusko run nai karna no time jab use karte
*** Skip also same as above just change [describe.skip]

--> Ek Describe k ander another ko Describe ko use karna both and One group k ander another group ko same aisa hi add kae sakte hai both are working

describe.skip("API test case group",()=>{
  test("API test case 1",()=>{
    render(<App />)
    let checkInput = screen.getByRole("textbox"); //input is showing or not checking
    expect(checkInput).toHaveAttribute("name","username");
  })
  //Nested Describe method with example
  describe("Inner Describe Method",()=>{
    test("Fetching test case 1",()=>{
      render(<App />)
      let checkInput = screen.getByRole("textbox"); //input is showing or not checking
      expect(checkInput).toHaveAttribute("name","username");
    })
  })
 
})


#-> 9 Test Onchange Event With Input Box  (Input filed k ander events ko kaise call karte)
----------------------------------------
-> Make input box in the component
-> Define state and use with onChange event
-> Import Component in test file
-> Write code for test case
-> Run test case

App.js
import React, { useState } from "react";

function App() {
  const [add, setAdd] = useState("");
  return (
    <div className="App">
      {/*Changing the value with the input box using onChange */}
      <input type="text" value={add} onChange={(e) => setAdd(e.target.value+" test")} />//Without default also use only input without using (+" test") 
    </div>
  );
}

export default App;

App.test.js
import App from "./App";
import { fireEvent, render, screen } from "@testing-library/react";

it("Input onChange event testing", () => {
  render(<App />);
  let InpuOnChangetest = screen.getByRole("textbox");
  // fireEvent will help to changing the value 
  fireEvent.change(InpuOnChangetest, { target: { value: "a" } }); // Targetting the value
  expect(InpuOnChangetest.value).toBe("a test"); // Without default also use only "a"
});


#-> 10 Test Click Event With Button  (Button Event se kya use kar sakte dekhte hai)
----------------------------------------
-> Make button and state in the component
-> Update state with button click event
-> Import component in test file
-> Write code for tesrt click event
-> Run test case

App.js
import React, { useState } from "react";
import "./App.css";

function App() {
  const [add, setAdd] = useState("");
  return (
    <div className="App">
      {/*Changing the Event with the help of clicking event */}
      <h1>Test Click Event With Button</h1>
      <button onClick={()=>setAdd("Updated Data showing in the Dom")}>Update Data</button>
      <h2>{add}</h2>
    </div>
  );
}

export default App;

App.test.js
import{fireEvent, render,screen} from "@testing-library/react";
import App from "./App"
// Checking while clicking the button data is showing in the dom or not
it("Click event test case",()=>{
  render(<App />);
  const btn=screen.getByRole("button"); //checking screen
  fireEvent.click(btn);  //Clicking the event
  expect(screen.getByText("Updated Data showing in the Dom")).toBeInTheDocument(); //expt Dom output

})


#-> 11 File and Folder naming conention  (File and folder ka name kaisa hona chahiye)
----------------------------------------
-> What file name we can use for the test case file
-> Folder name for testing files
-> Run Test case with naming convention

* file_name.test.js
* file_name.spec.js
* file_name.spec.jsx
--> These all are for accepted file names for testing (samjta hai k ye test files hai) but
** __tests__  --> It is a folder name (Iske ander jo b file hota hai vo test file hi hota .test nahi likh na padega every file ko vo test file hi samajta)

--> Check with same app.test.js code but file will be change as per above name all are working plese try to check with folder name also 


#-> 12 Before and After hooks  (Ye jest k hooks hai Unit test cases likhne me help karte hai)
----------------------------------------
-> Use of before and after hooks
-> beforeAll and beforeEach
-> AfterAll and afterEach
-> Examples

App.js Same as above one but App.test.js is changed
App.test.js
import{fireEvent, render,screen} from "@testing-library/react";
import App from "./App"

// Using before & after hooks using with examples


  // calling the function once before running the all test case
// beforeAll(()=>{
//   console.log("** Before all hooks ** ")
// })

// calling the function once before running the Each test case
// beforeEach(()=>{
//   console.log("## Before Each hooks ## ")
// })

// Checking while clicking the button data is showing in the dom or not
it("Click event test case",()=>{
  console.log("TestCase-1");
  render(<App />);
  const btn=screen.getByRole("button");
  fireEvent.click(btn);
  expect(screen.getByText("Updated Data showing in the Dom")).toBeInTheDocument();

})
// Checking while clicking the button data is showing in the dom or not
it("Click event test case-2",()=>{
  console.log("TestCase-2");
  render(<App />);
  const btn=screen.getByRole("button");
  fireEvent.click(btn);
  expect(screen.getByText("Updated Data showing in the Dom")).toBeInTheDocument();

})
// Checking while clicking the button data is showing in the dom or not
it("Click event test case-3",()=>{
  console.log("TestCase-3");
  render(<App />);
  const btn=screen.getByRole("button");
  fireEvent.click(btn);
  expect(screen.getByText("Updated Data showing in the Dom")).toBeInTheDocument();

})

// calling the function once after running the all test case
// afterAll(()=>{
//   console.log("afterAll Hooks running")
// })

// calling the function once after running the Each test case
afterEach(()=>{
  console.log("afterEach Hook Running Every TestCase")
});


--> Create server.js file then code it
export function cleanDb(){
    console.log("DataBase Cleaner")
}

--> import this in App.test.js
//Cleaning the database using with simple logic for beforeEach test case
beforeEach(()=>{
  cleanDb()
})


#-> 13 Snapshot testing (Ye most imp hai)
----------------------------------------
-> What is snapshot testing ? Examples
-> When this is useful
-> How to update snapshot

App.js Same as above one but App.test.js is changed
App.test.js
import {render} from "@testing-library/react";
import App from "./App";
test("Snapshot Tesing",()=>{
  const container = render(<App />)
  expect(container).toMatchSnapshot();
})

--> test case run karte hi ye automatic se Snapshot file create kar leta hai
--> Snapshot testing jab use karte hai pura app develop hogaya final deployment me jana hai vusse pehle Snapshot testing test karta hai kahi errors to miss nahi huwe check karne k liye.
--> Koie errors mile by mistake huwe to app sahi kar sakte hai
--> Koie errors nai aap ne jaan buj kar requirement change kare hai to just u press kardo
--> Vo new code Snapshot file me update hojaye ga


#-> 14 Important points for testing (Ye most imp hai)
----------------------------------------
1. What we should we test?
2. What things we should not test?
3. Important points

1......
--> Testing components RENDERING
--> UI elements that we write
--> Functions which we write
--> API testing
--> Event testing
--> Props and states
--> UI conditions testing | UI state testing

2.... Avoid testing for
--> External UI library code
--> No need to test default function of JS and rest
--> Sometime we should mock function rather than testing it in details

3.....
--> Do not write snapshot in starting of the project
--> Run test case after completing your Functionality
--> Make a standard for code coverage.


#-> 15 Class Component method testing (class components me testing kaisa kare)
----------------------------------------
-> Why i am talking about class components?
-> Make class components
-> Install React-test-renderer
-> Test class component method

Create Users.js
import React from 'react';
 export default class Users extends React.Component{
// User Function checking
    getUserList(){
        return "user list"
    }

    render(){
        return(
            <div>
                <h2>Users Class Components</h2>
            </div>
        )
    }
 }

 App.test.js
 import Users from "./Users";
import renderer from "react-test-renderer";
// User Function Testing

test("Class Components method Testing", () => {
  const componentData = renderer.create(<Users />).getInstance(); //getting all data with instance
  expect(componentData.getUserList()).toMatch("user list");
});


#-> 16 Functional Component method testing (FNC me testing kaise kare)
----------------------------------------
-> Discus possible case for method testing
-> Define the button, click event and method
-> Test method with event
-> Test method without event

--> You no need to test inside functions component data 
--> Compulsory you want to test then use 3 methods 
--> 1- Use function in same component for single function only easy not for multiple function
--> 2- Create a file and write another function code then import in app.js & test file also then test it
--> 3- Use in Class Components like class -15 
