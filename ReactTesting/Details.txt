
1. What is Testing ?
A. Software Testing is the process of finding the errors of the software product before it is launched.
 Validate functioning and features of software

2. Types of testing 
A. Testing --> Manual testing  , Automation Testing

3. Testing By developers
A. Unit Testing,    --> Testing individual units of components
 Integration Testing,--> Testing between two units or components
  E to E Testing      --> Test Start to End complete project

4. React Testing Tools
A. a) Jest Framework     b) React Testing Library

5. Setup
A. npx create-react-app blog-app  -> Then enter cd blog-app ->then npm start 
    -> open terminal then enter npm run test

6. Start with basic javaScript file Testing Logic
---------------------------------------------------------------
A. Create sum.js file and do code there && create sum.test.js for testing the code with expected output
    Go to google enter jest then https://jestjs.io/ inside this page go to API and go below methods click this or see -> test(name, fn, timeout)  //It is a sintax for test function

    sum.js
    export default function sum(a,b){
    return a+b;
}

//Test function came from jest(); 3 parameters 1,2** Mandatory 3 is optional(setTimeout)
//Test function takes three parameters 1-message, 2-call back func (write inside tesing output logic), 3-setTimeout for setting time for how much time after output will show. Add after the func },there);

--> test & expect both came from Jest, (render,screen) both came from React-Testing-Library

sum.test.js
import sum from "./sum";

test("testing for sum function-1",()=>{
expect(sum(10,20)).toBe(20)  //toBe means muje itna output chahiye batana hai
});

// Add more test functions this type also declare the variables there
test("testing for sum function-2",()=>{
    let a =10;
    let b =20;
    let output= 30;
    expect(sum(a,b)).toBe(output)  //toBe means muje itna output chahiye batana hai
    });


# 4 Understanding React Test Structure
------------------------------------
-> What need to import
-> How to render the component
-> How tests working with RTL
-> How test finding UI elements

--> All librariees are installed globally but we need to import some places
1.-> import { render, screen } from '@testing-library/react'; in App.js its comes by default
    -> render use karte hai component ko render karne k liye and screen use karte hai screen k vupar jo kuch be hai vusko test ko test karna chahte ho vusko screen k help se kar sakte hai
2.-->Jis component ko hum test karna chaahte hai vusko import karna hai
    -> Ek file k ander multiple files (components) ko test kar sakte hai [no problem].

App.js
    import { render, screen } from '@testing-library/react'; 
import App from './App';

test('renders learn react link', () => {    // TEST FUNCTION WITH 3 PARAMETERS
  render(<App />); // RENDERING THE COMPONENT WITH NAME
  const linkElement = screen.getByText(/learn react/i);     // SCREEN PE JO HAI VUSKE BASE PE TEST KARNA LIKE learn react inside this component showing in the screen RUNS PASS OR FAIL and i checking Capial,small also.
  expect(linkElement).toBeInTheDocument();  // EXPECTED DOCUMENT ME JO HAI VO TEST KARNA CHAHIYE
});

#-> 5 Write First React Test
----------------------------------------
-> Make new Test function
-> Write test case for check text on screen
-> Write test for case-insentive text
-> Test title for image
-> Write multiple expect in the same test function

** All Code done there 

App.test.js
import {render, screen} from "@testing-library/react";
import App from "./App";

test("Test First React Test Case", ()=>{
  render(<App />)
  const text = screen.getByText(/First React Test Case/i); //Its a case sensitive but using /i acpt C&c
const title = screen.getByTitle("GoogleImage");
const text2 = screen.getByText(/Software Testing/i);
  expect(text).toBeInTheDocument();
  expect (title).toBeInTheDocument();
  expect (text2).toBeInTheDocument();

});

App.js
import "./App.css";

function App() {
  return (
    <div className="App">
      {/* You can add anything in start and end ogf the given text but not middle expected text is matching or not it will check these things */}
      <p>ABC First React test Case ABC123a</p>
      <p>Software Testing</p>
      <img   title="GoogleImage"
        src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRrfwAhgmyiHHQ7kj-aEbk9AGCKcwo0wYeuwg&s"
      />
    </div>
  );
}

export default App;

#-> 6 Test Input Box  (how to test input boxes)
----------------------------------------
-> Make input box in App Component
-> Write test case function
-> The test input box is present are not
-> Test input box
    *name, placeholder, id, value, type

App.js
 <input type='text' placeholder="Enter User Name" name='username' value='Shaik Shafi' id='userId' />

App.test.js
test("Testing input box", ()=>{
  render(<App />)
  let checkInput = screen.getByRole("textbox"); //input is showing or not checking
  let checkInputPlaceHolder=screen.getByPlaceholderText("Enter User Name")

  expect(checkInput).toBeInTheDocument();
  expect(checkInputPlaceHolder).toBeInTheDocument();
  expect(checkInput).toHaveAttribute("name","username");
  expect(checkInput).toHaveAttribute("id","userId");
  expect(checkInput).toHaveAttribute("type","text");
  expect(checkInput).toHaveAttribute("value","Shaik Shafi");
})


#-> 7 Test Case Run Options  (Test case run karne k liye options)
----------------------------------------
-> How to run specific test files
-> What is watch mode
-> How to run the failed test case
-> How to run all test className
-> How to quit watch mode
-> How to filter test files for run
-> How to filter test case

** Code below
--> Copy App.test.js file code and Create another file Other.test.js then paste it run npm run test
--> running all tests then press(w) to show all commands press(p) then enter file name for filter
--> press(t) then enter test name message any word it filters that in both test functions
--> press(f) for failed test cases details, press(q) for comming out of the test or clossing the test
--> press(a) to rull all the files and test cases
--> Test Suites means -> Seperate test files,  Tests means -> All Test cases in all files


#-> 8 Test Grouping With Describe  (Test cases ko grouping kaise karte)
----------------------------------------
-> What is Describe
-> How to make test cases Grouping
-> Run test case with Describe
-> Skip in Describe
-> Only in Describe
-> Nested Describe

--> Describe kato Alag alag functionalities to define karne ka like UI, API, Functionality etc 
--> Describe k ander test cases ko likhte hai like nested if

//Creating a describe method for running particular UI group test cases
describe("UI test case group",()=>{
  test("test case 1",()=>{
    render(<App />)
    let checkInput = screen.getByRole("textbox"); //input is showing or not checking
    expect(checkInput).toHaveAttribute("name","username");
  })
  test("test case 2",()=>{
    render(<App />)
    let checkInput = screen.getByRole("textbox"); //input is showing or not checking
    expect(checkInput).toHaveAttribute("name","username");
  })
  test("test case 3",()=>{
    render(<App />)
    let checkInput = screen.getByRole("textbox"); //input is showing or not checking
    expect(checkInput).toHaveAttribute("name","username");
  })
})
--> Alag alag groups banana konsa group hona vo ek hi run kar sakte hai time ko save karna hoto

//Seperate group for API test cases with Another describe method
describe("API test case group",()=>{
  test("API test case 1",()=>{
    render(<App />)
    let checkInput = screen.getByRole("textbox"); //input is showing or not checking
    expect(checkInput).toHaveAttribute("name","username");
  })
  test("API test case 2",()=>{
    render(<App />)
    let checkInput = screen.getByRole("textbox"); //input is showing or not checking
    expect(checkInput).toHaveAttribute("name","username");
  })
  test("API test case 3",()=>{
    render(<App />)
    let checkInput = screen.getByRole("textbox"); //input is showing or not checking
    expect(checkInput).toHaveAttribute("name","username");
  })
})


--> Only means bahut test cases hai Sirf ek hi ko run karna chahte ho then add only after the describe name like [describe only ()] see below this one skips all only 1 running 

describe.only("API test case group",()=>{
  test("API test case 1",()=>{
    render(<App />)
    let checkInput = screen.getByRole("textbox"); //input is showing or not checking
    expect(checkInput).toHaveAttribute("name","username");
  })
  test("API test case 2",()=>{
    render(<App />)
    let checkInput = screen.getByRole("textbox"); //input is showing or not checking
    expect(checkInput).toHaveAttribute("name","username");
  })
  test("API test case 3",()=>{
    render(<App />)
    let checkInput = screen.getByRole("textbox"); //input is showing or not checking
    expect(checkInput).toHaveAttribute("name","username");
  })
})
--> Skip b kar sakte ek group me bahut errors hai vusko run nai karna hai no time aur dusre group ko run karna hai jab use karte
*** Skip also same as only bas text change karna place same just change [describe.skip()]

--> Ek Describe k ander another ko Describe ko use karna both and One group k ander another group ko same aisa hi add kae sakte hai both are working

--> Nested Describe k ander Single test case ku b skip & only kar sakte hai 
--> Nested Describe k ander Single describe ko b Skip kar sakte hai and only b kar sakte hai all working

describe.skip("API test case group",()=>{
  test("API test case 1",()=>{
    render(<App />)
    let checkInput = screen.getByRole("textbox"); //input is showing or not checking
    expect(checkInput).toHaveAttribute("name","username");
  })
  //Nested Describe method with example
  describe("Inner Describe Method",()=>{
    test("Fetching test case 1",()=>{
      render(<App />)
      let checkInput = screen.getByRole("textbox"); //input is showing or not checking
      expect(checkInput).toHaveAttribute("name","username");
    })
    test.skip("Fetching test case 2",()=>{
      render(<App />)
      let checkInput = screen.getByRole("textbox"); //input is showing or not checking
      expect(checkInput).toHaveAttribute("name","username");
    })
  })
 
})


#-> 9 Test Onchange Event With Input Box  (Input filed k ander events ko kaise call karte)
----------------------------------------
-> Make input box in the component
-> Define state and use with onChange event
-> Import Component in test file
-> Write code for test case
-> Run test case

App.js
import React, { useState } from "react";

function App() {
  const [add, setAdd] = useState("");
  return (
    <div className="App">
    <h1>Change Event Checking</h1>
      {/*Changing the value with the input box using onChange */}
      <input type="text" value={add} onChange={(e) => setAdd(e.target.value+" Shaik")} />
      {/* Without default also use only input without using (+" Shaik") */}
    </div>
  );
}

export default App;

App.test.js
import App from "./App";
import { fireEvent, render, screen } from "@testing-library/react";

test("Input Box OnChange Event Checking",()=>{
  render(<App />)
  let InputChangeEvent =screen.getByRole("textbox");
  // fireEvent will help to changing the value in the input for testing not UI Showing
  fireEvent.change(InputChangeEvent,{target: {value:"Shakeer"}}) // Targetting the value With default
  expect(InputChangeEvent.value).toBe("Shakeer Shaik") // Without default also use only "Shakeer"
})


#-> 10 Test Click Event With Button  (Button Event se kya use kar sakte dekhte hai)
----------------------------------------
-> Make button and state in the component
-> Update state with button click event
-> Import component in test file
-> Write code for test click event
-> Run test case
--> Seperate Components for buttons and Testing with a single Test file 

// All Code with Single App.js Component 
App.js
import React, { useState } from "react";
import "./App.css";

function App() {
  const [add, setAdd] = useState("");
  return (
    <div className="App">
      {/*Changing the Event with the help of clicking event */}
      <h1>Test Click Event With Button</h1>
      <button onClick={()=>setAdd("Updated Data showing in the Dom")}>Update Data</button>
      <h2>{add}</h2>
    </div>
  );
}

export default App;

App.test.js
import{fireEvent, render,screen} from "@testing-library/react";
import App from "./App"
// Checking while clicking the button data is showing in the dom or not
it("Click event test case",()=>{
  render(<App />);
  const btn=screen.getByRole("button"); //checking screen
  fireEvent.click(btn);  //Clicking the event
  expect(screen.getByText("Updated Data showing in the Dom")).toBeInTheDocument(); //expt Dom output

})

// Seperate Components With Adding in App.js for showing UI & Writting Test cases in App.test.js testing
--------------------------------------------
Button.js
import React, { useState } from "react";
function Button() {
  const [add, setAdd] = useState("");
  return (
    <div className="Button">
      <h1>Click Event Checking With Button - 1</h1>
      <button type="submit" onClick={()=>setAdd("Updated Data Showing In The Screen")} >Button - 1</button>
      <h2>{add}</h2>
    </div>
  );
}
export default Button;

Button2.js
import React, { useState } from "react";
function Button2() {
  const [add, setAdd] = useState("");
  return (
    <div className="Button">
      <h1>Click Event Checking With Button - 2</h1>
      <button type="submit" onClick={()=>setAdd("ClickEvent Checking With Another Functions")} >Button - 2</button>
      <h2>{add}</h2>
    </div>
  );
}
export default Button2;

App.test.js
import { fireEvent, render, screen } from "@testing-library/react";
import Button from "./Button";
import Button2 from "./Button2";

//Button Created in Other seperate Component
test("Button OnClick Event Checking", () => {
  render(<Button />);
  let btnClickEvent = screen.getByRole("button");
  fireEvent.click(btnClickEvent);
  expect(
    screen.getByText("Updated Data Showing In The Screen")
  ).toBeInTheDocument();
});

//Button -2 Created in Other Seperate Component
test("Button OnClick Event Checking With Seperate Component", () => {
  render(<Button2 />);
  let ClickEvent = screen.getByRole("button");
  fireEvent.click(ClickEvent);
  expect(
    screen.getByText("ClickEvent Checking With Another Functions")
  ).toBeInTheDocument();
});

App.js
import React from "react";
import Button from "./Button";
import Button2 from "./Button2";
function App() {
  return (
    <div className="App">
      <h1>Click Event checking with seperate multiple components</h1>
      <Button />
      <Button2 />
    </div>
  );
}
export default App;


#-> 11 File and Folder naming conention  (File and folder ka name kaisa hona chahiye)
----------------------------------------
-> What file name we can use for the test case file
-> Folder name for testing files
-> Run Test case with naming convention

* file_name.test.js
* file_name.spec.js
* file_name.spec.jsx
--> These all are for accepted file names for testing (samjta hai k ye test files hai) but
** __tests__  --> It is a folder name (Iske ander jo b file hota hai vo test file hi hota .test nahi likh na padega every file ko vo test file hi samajta)

--> Check with same app.test.js code but file will be change as per above name all are working plese try to check with folder name also 


#-> 12 Before and After hooks  (Ye jest k hooks hai Unit test cases likhne me help karte hai)
----------------------------------------
-> Use of before and after hooks
-> beforeAll and beforeEach
-> AfterAll and afterEach
-> Examples

App.js Same as above one but App.test.js is changed
App.test.js
import{fireEvent, render,screen} from "@testing-library/react";
import App from "./App"

// Using before & after hooks using with examples


  // calling the function once before running the all test case
// beforeAll(()=>{
//   console.log("** Before all hooks ** ")
// })

// calling the function once before running the Each test case
// beforeEach(()=>{
//   console.log("## Before Each hooks ## ")
// })

// Checking while clicking the button data is showing in the dom or not
it("Click event test case",()=>{
  console.log("TestCase-1");
  render(<App />);
  const btn=screen.getByRole("button");
  fireEvent.click(btn);
  expect(screen.getByText("Updated Data showing in the Dom")).toBeInTheDocument();

})
// Checking while clicking the button data is showing in the dom or not
it("Click event test case-2",()=>{
  console.log("TestCase-2");
  render(<App />);
  const btn=screen.getByRole("button");
  fireEvent.click(btn);
  expect(screen.getByText("Updated Data showing in the Dom")).toBeInTheDocument();

})
// Checking while clicking the button data is showing in the dom or not
it("Click event test case-3",()=>{
  console.log("TestCase-3");
  render(<App />);
  const btn=screen.getByRole("button");
  fireEvent.click(btn);
  expect(screen.getByText("Updated Data showing in the Dom")).toBeInTheDocument();

})

// calling the function once after running the all test case
// afterAll(()=>{
//   console.log("afterAll Hooks running")
// })

// calling the function once after running the Each test case
afterEach(()=>{
  console.log("afterEach Hook Running Every TestCase")
});


--> Create server.js file then code it
export function cleanDb(){
    console.log("DataBase Cleaner")
}

--> import this in App.test.js
//Cleaning the database using with simple logic for beforeEach test case
beforeEach(()=>{
  cleanDb()
})


#-> 13 Snapshot testing (Ye most imp hai)
----------------------------------------
-> What is snapshot testing ? Examples
-> When this is useful
-> How to update snapshot

App.js Same as above one but App.test.js is changed
App.test.js
import {render} from "@testing-library/react";
import App from "./App";
test("Snapshot Tesing",()=>{
  const container = render(<App />)
  expect(container).toMatchSnapshot(); 
})

--> render ko he ek variable me lena hai vusi ko expect me match karna hai
--> test case run karte hi ye automatic se Snapshot file create kar leta hai
--> Snapshot testing jab use karte hai pura app develop hogaya final deployment me jana hai vusse pehle Snapshot testing test karta hai kahi errors to miss nahi huwe check karne k liye.
--> Koie errors mile by mistake huwe to app sahi kar sakte hai
--> Koie errors nai aap ne jaan buj kar requirement change kare hai to just u press kardo terminal me
--> Vo new code Snapshot file me update hojaye ga


#-> 14 Important points for testing (Ye most imp hai)
----------------------------------------
1. What we should we test?
2. What things we should not test?
3. Important points

1......
--> Testing components RENDERING
--> UI elements that we write
--> Functions which we write
--> API testing
--> Event testing
--> Props and states
--> UI conditions testing | UI state testing

2.... Avoid testing for
--> External UI library code
--> No need to test default function of JS and jest
--> Sometime we should mock function rather than testing it in details

3.....
--> Do not write snapshot in starting of the project
--> Run test case after completing your Functionality
--> Make a standard for code coverage.


#-> 15 Class Component method testing (class components me testing kaisa kare)
----------------------------------------
-> Why i am talking about class components?
-> Make class components
-> Install React-test-renderer
-> Test class component method

Create Users.js
import React from 'react';
 export default class Users extends React.Component{
// User Function checking
    getUserList(){
        return "user list"
    }

    render(){
        return(
            <div>
                <h2>Users Class Components</h2>
            </div>
        )
        }}

 App.test.js
 import Users from "./Users";
import renderer from "react-test-renderer";
// User Function Testing

test("Class Components method Testing", () => {
  const componentData = renderer.create(<Users />).getInstance(); //getting all data with instance
  expect(componentData.getUserList()).toMatch("user list"); // calling the user class inside method
});

//Present Renderer .create is not working in updated version its debricated

#-> 16 Functional Component method testing (FNC me testing kaise kare)
----------------------------------------
-> Discus possible case for method testing
-> Define the button, click event and method
-> Test method with event
-> Test method without event

--> You no need to test inside functions component data 
--> Compulsory you want to test then use 3 methods 
--> 1- Use function in same component for single function only its a easy way, not for multiple function
--> 2- Create a file and write another function code then import in app.js & test file also then test it
--> 3- Use in Class Components like class -15 

App.js
import React,{useState} from "react";
import "./App.css";
import handleOtherMethod from "./OtherFunMethod";

function App() {
  const [data,setData] = useState("");

  //First Method for testing functional components in same application
  const handleData =()=>{
    setData("Hello");
  }
  //You use another function its difficult to write test case so keep outside another file and import it
  //creating new file OtherFunMethod then import it
  // Another method is use Class Components

  return (
    <div className="App">
    <h1>Functional Compnents Testing</h1>
    <button data-testid="btn1" onClick={handleData}>Update</button>
    <button onClick={handleOtherMethod}>Print</button>
    <h2>{data}</h2>
    </div>
  );
}

export default App;

App.test.js
import { fireEvent, render,screen } from "@testing-library/react";
import App from "./App";
import handleOtherMethod from "./OtherFunMethod";

test("Functional Components Testcase-1", () => {
  render(<App />);
  const btn = screen.getByTestId("btn1");
  fireEvent.click(btn);
  expect(screen.getByText("Hello")).toBeInTheDocument();
});

test("Function Component Test OtherMethod",()=>{
  expect(handleOtherMethod()).toMatch("Hi");
})

OtherFunMethod.js
const handleOtherMethod =()=>{
    return "Hi"
}

export default handleOtherMethod;


#-> 17 RTL Query (React Testing Library Query se UI elements k ko findout karte hai & baad me testing bi)
----------------------------------------
-> What is RTL Query
-> Why need RTL Query
-> Steps in Testing UI
  -> Render Component
  -> Find element and action
  -> Assertion
 [ test("Functional Components Testcase-1", () => { 
  render(<App />);                                      // Render Component
  const btn = screen.getByTestId("btn1");               // 2 lines are Find element & action
  fireEvent.click(btn);
  expect(screen.getByText("Hello")).toBeInTheDocument(); // This is Assertion
});
 ]

-> How RTL Query finds elements ( Finding With the help below Queries)
  -> By Element Type  -> By Element name  -> By Element id  -> By Test id etc.
-> Type of RTL Query
  --> Find Single Element
      -> 1. getBy  -> 2. queryBy  -> 3. findBy
  --> Find Multiple elements
      -> 1. getAllBy  -> 2. queryAllBy  -> 3. findAllBy


#-> 18 getByRole Query (UI elements ko testing karte time bahut use hota hai)
----------------------------------------
-> What is the role in getByRole
-> What is semantic elements
  -> Semantic kato Already pre-define values hate so means vusko ek values already hata like below
  -> Button, headding tags and table are semantic elements
  -> Div and span are non semantic elements
-> Test testbox with getByRole
  -> test box present are not  -> test box value  -> text box disable or not
-> Test button with getByRole

// Code Already done in above classes & Documentation also available

#-> 19 Multiple elements with Role Custom Role (Multiple elements k saat getByRole ko kaisa handle kar sakte)
----------------------------------------
-> Multiple elements with the same role issue
-> Multiple buttons with role
-> Multiple input box with role
-> Custom role

App.js
import React from "react";
function App() {
  return (
    <div className="App">
      <h1>Click Events With getByRole</h1>
      <button>Click Me-1</button>
      <button>Click Me-2</button>
      <br />
      <br />
      <label htmlFor="test_input1">Input Field-1</label>
      <input type="text" id="test_input1" />
      <label htmlFor="test_input2">Input Field-2</label>
      <input type="text" id="test_input2" />
    </div>
  );
}
export default App;


App.test.js
import { render, screen } from "@testing-library/react";
import App from "./App";

test("getByRole Testing", () => {
  render(<App />);
  //const btn1=screen.getByRole("button"); // aap 2 buttons use kare to error aata it works only one button
  const btn1 = screen.getByRole("button", { name: "Click Me-1" }); //Aisa use kare to working properly
  const btn2 = screen.getByRole("button", { name: "Click Me-2" });
  expect(btn1).toBeInTheDocument();
  expect(btn2).toBeInTheDocument();

  const input1 = screen.getByRole("textbox", { name: "Input Field-1" }); // using with Label for input beacause no test inside the input
  const input2 = screen.getByRole("textbox", { name: "Input Field-2" });
  expect(input1).toBeInTheDocument();
  expect(input2).toBeInTheDocument();
});



#-> 20 RTL Query : getAllByRole (UI elements ko testing karte time multiple elements me label use hota hai testing karne k liye)
----------------------------------------
-> Handle multiple elements
-> Multiple buttons with the same role
-> Multiple select optiom box with the same role

App.js
import React from "react";
import "./App.css";
function App() {
  return (
    <div className="App">
      <h1>Click Events With getByRole</h1>
      <button>Click Me-1</button>
      <button>Click Me-2</button>
      <button>Click Me-3</button>
      <button>Click Me-4</button>
      <button>Click Me-5</button>
      <button>Click Me-6</button>
      <br />
      <br />
      <select>
        <option>1</option>
        <option>2</option>
        <option>3</option>
        <option>4</option>
      </select>
    </div>
  );
}
export default App;

App.test.js
import { render, screen } from "@testing-library/react";
import App from "./App";

test("getAllByRole Testing With Buttons", () => {
  render(<App />);
  const btn1 = screen.getAllByRole("button");
  for(let i=0;i<btn1.length;i++){
    expect(btn1[i]).toBeInTheDocument(); // you can do (btn1[0]) like that or run a for loop and get n number of outputs with using btn1[i]
  } 
});

test("getAllByRole Testing With Select",()=>{
  render(<App />);
  const options= screen.getAllByRole("option");
  for(let i=0;i<options.length;i++){
    expect(options[i]).toBeInTheDocument();
  }
})



#-> 21 RTL Query : getByLabelText (UI elements me single Chekbox ko testing karte time elements me Label use hota hai)
----------------------------------------
-> use of getByLabelText
-> Test input field with getByLabelText
-> Test checkbox with getByLabelText


#-> 22 RTL Query : getAllByLabelText (UI elements me multiple Chekboxes ko testing karte time multiple elements me use karne use karte hai)
----------------------------------------
-> use of getAllByLabelText
-> Test multiple input field
-> Test multiple checkbox


#-> 23 RTL Query : getByPlaceholderText      RTL Query : getAllByPlaceholderText
 (UI elements me single & multiple placeholders ko testing karte time multiple elements me use karne use karte hai)
----------------------------------------
-> Use of getByPlaceholderText
-> Use of getAllByPlaceholderText
-> Test single input field
-> Test multiple input field


#-> 24 RTL Query : getByText          RTL Query : getAllByText
(UI elements me single & multiple Text Related elements ko testing karte time and multiple elements me use karte time use karte hai)
----------------------------------------
-> Use of getByText
-> Use of getAllByText
-> Test Single button, h1 and p tags
-> Test Multiple buttons, h1 and p tags


#-> 25 RTL Query : getByTestId          RTL Query : getAllByTestId
(UI elements me single & multiple Test Related elements ko testing karte time and multiple elements me use karte time use karte hai)
----------------------------------------
-> Use of getByTestId
-> Use of getAllByTestId
-> Test single elements with test id
-> Test multiple elements with test id


#-> 26 Overriding data-testid (UI elements me TestId ko overRide karke kaisa use karte hai)
----------------------------------------
-> Why need to override test id.
-> How to override test id
-> Test elements after override test id


#-> 27 RTL Query : getByDisplayValue          RTL Query : getAllByDisplayValue
(UI elements me single & multiple Display Related elements ko testing karte time and multiple elements me use karte time use karte hai)
----------------------------------------
-> Use of getByDisplayValue
-> Use of getAllByDisplayValue
-> Test single elements with getByDisplayValue
-> Test multiple elements with getAllByDisplayValue


#-> 28 RTL Query : getByTitle          RTL Query : getAllByTitle
(UI elements me single & multiple Title Related elements ko testing karte time and multiple elements me use karte time use karte hai)
----------------------------------------
-> Use of getByTitle
-> Use of getAllByTitle
-> Test single elements with getByTitle
-> Test multiple elements with getAllByTitle


#-> 29 RTL Query : getByAltText          RTL Query : getAllByAltText
(Images me single & multiple AltText Related elements ko testing karte time and multiple elements me use karte time use karte hai)
----------------------------------------
-> Use of getByAltText
-> Use of getAllByAltText
-> Test single image with getByAltText
-> Test multiple images with getAllByAltText


#-> 30 Priority Order for RTL Queries (Vupar k sab queries me kisko first use karna and konsa jyada priority hai, Iss k liye RTL Document me Queries k ander Order vise diye hai vusko check kar sakte hai)
----------------------------------------

-----------------------------------------------------------------------------------------------------

#-> 31 Assertion Methods (What ever in the expect Checking is there are not it s called Assertion, methods are toBeInTheDocument and toHaveAttribute etc.)
-----------------------------------------
-> What are Assertion Methods
-> Test elements with approx 10 Assertion Methods
-> Assertion Not Methods


#-> 32 TextMatch with String and Regex (Text ko match karne k liye use karte hai, Hit & Trail for Unknown Text Checking with String & Regex)
---------------------------------------------
-> What is text match
-> Text Match with String
-> Text Match with Regex


#-> 33 TextMatch with Function (Same as above one just Change with Function)
-----------------------------------------
-> What is Text Match
-> Text Match with Function

--------------------------------------------------------------------------------------------------

#-> 34 queryBy and queryAllBy (queryBy all methods same as working like getBy but one Extra thing hai ex- Login karne k Baad hi Logout dikhta & Logout hone ke bad hi Login dikhta [Using ternary true ? :] )
----------------------------------------------
-> Use of query by type
-> How to test elements with query
-> Examples of queryBy and queryAllBy
-> Interview Questions

------------------------------------------------------------------------------------------------------

#-> 35 findBy and findAllBy (Page ko load karte ya update k baad load hota hai na UI element time leta hai like 5-10 sec, Jab vun elements ko findBy se test karte hai )
------------------------------------------------
-> use of find by
-> Write React code
-> Test elements with findBy
-> Test elements with findByAll

------------------------------------------------------------------------------------------------------

#-> 36 Test with JS Query | Custom Query (First preference is get,query,find k methods hai but isko use nai karne k time pe Custom Query use kar sakte hai)
----------------------------------------------
-> Using with javaScript querySelector  and querySelectorAll

#-> 37 Querying Within elements [Find element within an element]
(Parent k saat Child ko be test karna hai jab use karte hai like <div>Parent <p> Child </p> </div>)
-----------------------------------

#-> 38 Click Event with User Event (User Event Library ek supportive library hai for using some special events in React,Angular etc. Isme Async & Await use karte, All Clear given in RTL Document)
-------------------------------------------
-> Why we should use User event Library
-> Update User event with state
-> Write Click event with state
-> Test click event with User event


#-> 39 onChange Event Testing OR Keyboard interactions (Keyboard k help se jo changes or events karte hai vusko )
--------------------------------------------
-> What is the keyboard interaction
-> Write code for on-change event
-> Test on change event
-> Interview Question


#-> 40 act function (act function pehle state ko call karta baad me assertion means expect ko using async and await)
----------------------------------------------
-> Use of act function
-> Issue before using act function
-> Apply act function
-> Interview Questions


#-> 41 Test Component Props  (Props ko components me use karke kaisa test karte hai)
---------------------------------------------
-> Make Component
-> Pass Props and Display on UI
-> Write test case to test Props
-> Interview Questions


#-> 42 Functional Props Testing and Mocking  (Props ko Functions me kaisa bhejte and test kaisa karte with the help of Mocking)
-----------------------------------------------
-> Add Props and click event to Component
-> Fucntion mocking in testing file
-> Write test case to test functional Props
-> Interview Questions


#-> 43 Debuging in React testing library  (Testing karte time aane wale errors ko problems ko kaisa solve kare )
-----------------------------------------------
-> Automatic debugging
-> prettyDom
-> debug
-> DEBUG_PRINT_LIMIT=10000 npm test
-> logRoles


#-> 44 Testing Playground on Chrome (Ye RTL k liye ek tool hai Test cases ko achha likhne k liye use)
--------------------------------------------
-> What is testing Playground (Its a Chrome Extension as working as a finding elements test case querie)
-> How to install and use it
-> Make test case query


#-> 45 MSW and HTTP Request Testing ( Real Time data ko test karna diffuclt and expensive hota hai vusse Mock ki use se API data ku call karte hai)
----------------------------------------------
-> What is MSW?
    -> Mostly we test rest API by mocking
    -> MSW stands for Mock Service Worker
    -> React testing library recommed to use MSW
    -> We can mock api with jest also
-> Use of MSW
-> Why we mock API
-> Why We should use MSW


#-> 46 Call API for Testing (Make Dummi api data )
-------------------------------------------------


#-> 47 API Testing with MSW (API ki testing kaise karte hai)
---------------------------------------------
-> Install MSW
-> Make Mock Server Folder
-> Make server file
-> Make server handler file
-> Write code for API testing
-> Call server in test setup file







